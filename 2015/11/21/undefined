<html>
    <!DOCTYPE html>
<html lang="zh">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta http-equiv="X-UA-Compatible" content="ie=edge">

	

	<title>C语言实现给定16进制转换成10进制以及相关细节优化 | akakanch</title>
	<meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1">
	<link rel="shortcut icon" href="/favicon.ico">	
	<link rel="stylesheet" href="/css/bootstrap.min.css">
	<link rel="stylesheet" href="/css/caomei.css">
	<link rel="stylesheet" href="/css/style.css">
	<script async src="//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"></script>
</head>

    <body>
        <div class="root">
            <div class='topnavs container fixed-690'>
    <nav class="navbar navbar-expand-lg navbar-light">
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
            aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                
                    <li class="nav-item">
                        <a class="nav-link" href="/">
                            首页
                        </a>
                    </li>
                    
                    <li class="nav-item">
                        <a class="nav-link" href="/categories">
                            分类
                        </a>
                    </li>
                    
                    <li class="nav-item">
                        <a class="nav-link" href="/archives">
                            归档
                        </a>
                    </li>
                    
                    <li class="nav-item">
                        <a class="nav-link" href="/tags">
                            标签
                        </a>
                    </li>
                    
                    <li class="nav-item">
                        <a class="nav-link" href="/about">
                            关于
                        </a>
                    </li>
                    
            </ul>
        </div>
    </nav>
</div>
                <section class="container mainbody fixed-690">
                    <div class="post">
    <div class="post-title">
        <h1>
            C语言实现给定16进制转换成10进制以及相关细节优化 
        </h1>

        
        <div class="post-title-views">
            <span id="busuanzi_container_page_pv">
                本文总阅读量 <span id="busuanzi_value_page_pv"></span> 次
            </span>
        </div>
        
    </div>
    <div class="post-content markdown">
        <p>好吧，这个其实是某某书上的一道习题，刚开始看的时候我还以为可以直接输入0xFFF的形式同时赋值给int类型来进行转换，结果，结果发现我想多了。所以，我决定来写篇文章谈谈这个算法。好吧，下面进入正题。</p>
<p>首先说说我们的转换原理，当然是<a href="https://www.google.com.hk/search?q=%E9%99%A4K%E5%8F%96%E4%BD%99%E6%B3%95&amp;oq=%E9%99%A4K%E5%8F%96%E4%BD%99%E6%B3%95&amp;gs_l=serp.3..35i39.1950.3477.0.3661.3.3.0.0.0.0.357.357.3-1.1.0....0...1c.1.64.serp..2.1.356.j45CD7vYAcw" target="_blank" rel="noopener">基于除K取余法</a>的逆运算。</p>
<p>比如，我们现有16进制数据 0xFFF  <em>（16进制：1,2,….A,B…F，其中A=10，F=15）</em></p>
<p>按照除K取余法的逆运算，我们有：</p>
<p><strong>0xFFF</strong> = <span style="color: #800000;">15<em>(16^2) + 15</em>(16^1) + 15*(16^0)</span> = 4095</p>
<p><strong>0x12A</strong> =  <span style="color: #800000;">1<em>(16^2) + 2</em>(16^1) + 10*(16^0)</span> = 298</p>
<hr>
<p>&nbsp;</p>
<p>程序的具体实现：</p>
<p>我在文章开头提到，我之前想的是<del>直接用scanf()输入一个16进制数字，再赋值给int即可</del>，后来，我试了直接输入FFF或者是输入0xFFF发现都不行，最后突然想到，原来自己忘记了scanf的%d只接受数字，所以。</p>
<p>我们要自己写函数转换，就需要接受一个字符串型的16进制数据。然后再用循环依次处理字符串中的每一个字符。</p>
<p>在写的过程中了，最早想的是针对每一个字符我用if块或switch-case来实现判断不同的字符和分别对它们进行不同的处理。不过后来又想了想，这种方法难免会让代码很长。</p>
<p>所以，后来查<a href="https://en.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">ASCII表</a>的，想到，我可以利用加减法来判断是那个字符。方法如下：</p>
<p>我们要分2种情况：字符属于‘0’—‘9’和字符属于‘A’—‘F’或‘a’—‘f’的情况。</p>
<p>然后，查<a href="https://en.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">ASCII表</a>知：‘A’=65，‘a’=97，‘0’=48</p>
<p>所以，接下来我们要判断当前处理字符是哪个就会变得非常简单，不用if块或switch-case哦。</p>
<p><pre class="lang:c decode:true">                if ((hex[i]&gt;=’A’ &amp;&amp; hex[i]&lt;=’F’) || (hex[i]&gt;=’a’&amp;&amp;hex[i]&lt;=’f’))<br>        {<br>            if (hex[i] &gt;= ‘A’ &amp;&amp; hex[i] &lt;= ‘F’)   //A=65,<br>            {<br>                for (p = 1; p &lt; len; p++)<br>                {<br>                    buf <em>= 16;<br>                }<br>                dec += (ch-55)</em>buf;       /// //看懂了吧<br>            }<br>            else    //a=97,<br>            {<br>                for (p = 1; p &lt; len; p++)<br>                {<br>                    buf <em>= 16;<br>                }<br>                dec += (ch - 87)</em>buf;    //看懂了吧<br>            }<br>        }</pre><br>注意看我打了注释的代码，这样的代码是不是非常简洁，比用很多if或者switch简洁多了:)</p>
<p><pre class="lang:c decode:true">dec += (ch-55)*buf;</pre><br><span style="color: #ff00ff;">我们拿A举例，在实际判断中我们其实是不需要知道这个字符具体是什么值，我们的目的就是将它化成10进制，A在16进制中代表10，而A在ASCII码中的值为65，那么，若char X = ‘A’的话，就有 A - t =10，就得到t=55，剩下的对于每个在’A’—‘F’之间的16进制数字，我们只需要令它减去55就得到对应代表的数字了。</span></p>
<p>当然，这里的不用if块指的是判断单个字符上，但是我们仍然需要用if保证当前处理字符在16进制中合法。</p>
<hr>
<p>&nbsp;</p>
<p>下面是完整代码：</p>
<p><pre class="lang:c decode:true ">#include&lt;stdio.h&gt;</pre></p>
<p>#include&lt;string.h&gt;</p>
<p>int Hex2Dec(char<em> hex)<br>{<br>    int dec = 0, i = 0, len = 0, buf = 0, p = 0;<br>    char ch = 0;<br>    while (hex[len])<br>    {<br>        len++;<br>    }<br>    while (hex[i])<br>    {<br>        ch = hex[i];<br>        buf = 1;<br>        if ((hex[i]&gt;=’A’ &amp;&amp; hex[i]&lt;=’F’) || (hex[i]&gt;=’a’&amp;&amp;hex[i]&lt;=’f’))<br>        {<br>            if (hex[i] &gt;= ‘A’ &amp;&amp; hex[i] &lt;= ‘F’)   //A=65,<br>            {<br>                for (p = 1; p &lt; len; p++)<br>                {<br>                    buf </em>= 16;<br>                }<br>                dec += (ch-55)<em>buf;<br>            }<br>            else if(hex[i] &gt;= ‘a’&amp;&amp;hex[i] &lt;= ‘f’)   //a=97,<br>            {<br>                for (p = 1; p &lt; len; p++)<br>                {<br>                    buf </em>= 16;<br>                }<br>                dec += (ch - 87)<em>buf;<br>            }<br>        }<br>        else if(hex[i] &gt;=’0’ &amp;&amp; hex[i]&lt;=’9’)   //0=48,<br>        {<br>            for (p = 1; p &lt; len; p++)<br>            {<br>                buf </em>= 16;<br>            }<br>            dec += (ch - 48)*buf;<br>        }<br>        else<br>        {<br>            printf(“nninvaild data input!nn”);<br>            return 0;<br>        }<br>        i++;<br>        len–;<br>    }</p>
<pre><code>return dec;
</code></pre><p>}</p>
<p>int main()<br>{<br>    char hex[99] = { 0 };<br>    printf(“please enter a Hex number:”);<br>    gets(hex);<br>    printf(“its equal to %dnn”, Hex2Dec(hex));<br>    return 0;<br>}<br><br>运行结果：和计算器算出来的一模一样</p>
<p><a href="http://139.129.6.122/wp-content/uploads/2015/11/16_c_2.jpg" target="_blank" rel="noopener"><img src="http://139.129.6.122/wp-content/uploads/2015/11/16_c_2.jpg" alt="16_c_2"></a></p>
 
    </div>
    <div class="post-foot">
        <div id="disqus_thread"></div>
    </div>
</div>


                </section>
                <footer class="container fixed-690 footer">
    <div>
        <span>Power by <a href="https://hexo.io">Hexo</a></span>
    </div>
    <div>
        <span>Theme <a href="https://github.com/zhengxiaowai/hexo-theme-lessless">lessless</a></span>
    </div>
        
            
<div>
    <span id="hexiangyutest_container_site_pv">
    PV: <span id="busuanzi_value_site_pv"></span>
    </span>
    <span id="busuanzi_container_site_uv">
    UV: <span id="busuanzi_value_site_uv"></span>
    </span>
</div>

        
</footer>
        </div>
        
<script src="/js/jquery-3.2.1.slim.min.js"></script>
<script src="/js/popper.min.js"></script>
<script src="/js/bootstrap.min.js"></script>


    

    </body>
</html>