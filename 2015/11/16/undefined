<html>
    <!DOCTYPE html>
<html lang="zh">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta http-equiv="X-UA-Compatible" content="ie=edge">

	

	<title>C语言实现螺旋矩阵输出 | akakanch</title>
	<meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1">
	<link rel="shortcut icon" href="/favicon.ico">	
	<link rel="stylesheet" href="/css/bootstrap.min.css">
	<link rel="stylesheet" href="/css/caomei.css">
	<link rel="stylesheet" href="/css/style.css">
	<script async src="//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"></script>
</head>

    <body>
        <div class="root">
            <div class='topnavs container fixed-690'>
    <nav class="navbar navbar-expand-lg navbar-light">
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
            aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                
                    <li class="nav-item">
                        <a class="nav-link" href="/">
                            首页
                        </a>
                    </li>
                    
                    <li class="nav-item">
                        <a class="nav-link" href="/categories">
                            分类
                        </a>
                    </li>
                    
                    <li class="nav-item">
                        <a class="nav-link" href="/archives">
                            归档
                        </a>
                    </li>
                    
                    <li class="nav-item">
                        <a class="nav-link" href="/tags">
                            标签
                        </a>
                    </li>
                    
                    <li class="nav-item">
                        <a class="nav-link" href="/about">
                            关于
                        </a>
                    </li>
                    
            </ul>
        </div>
    </nav>
</div>
                <section class="container mainbody fixed-690">
                    <div class="post">
    <div class="post-title">
        <h1>
            C语言实现螺旋矩阵输出 
        </h1>

        
        <div class="post-title-views">
            <span id="busuanzi_container_page_pv">
                本文总阅读量 <span id="busuanzi_value_page_pv"></span> 次
            </span>
        </div>
        
    </div>
    <div class="post-content markdown">
        <p>上周的C语言实验课，有一道选做题，叫我们输出n*n（n&lt;15）的<span style="color: #ff6600;">螺旋矩阵</span>，就像这样矩阵：</p>
<p>一个5*5的螺旋矩阵：</p>
<p><a href="http://139.129.6.122/wp-content/uploads/2015/11/sm_print_1.png" target="_blank" rel="noopener"><img src="http://139.129.6.122/wp-content/uploads/2015/11/sm_print_1.png" alt="sm_print_1"></a></p>
<p><span style="color: #ff6600;">这里的讨论的矩阵比较特殊，因为是n<em>n的而不是n</em>j的</span>。初看这个题觉得挺简单的，但实际上做的时候还是费了些时间。</p>
<hr>
<p>这里先讨论第一种方法吧，第二种方法在未来我会补上。</p>
<hr>
<p>&nbsp;</p>
<h2 id="法一："><a href="#法一：" class="headerlink" title="法一："></a>法一：</h2><p>第一种方法基本思路是：<span style="color: #993300;">在一个大的循环里分别用4个内嵌循环控制矩阵顶部行，右侧列，底部行，左侧列的输出。</span></p>
<p>同时，我们要意识到，<span style="color: #993300;">在输出n为偶数或者n为奇数的对应螺旋矩阵的时候，最后一点会有些不同</span>，具体请看下面2张图：</p>
<p>（左侧为n=4，右侧为n=5）</p>
<p><a href="http://139.129.6.122/wp-content/uploads/2015/11/sm_print_2.png" target="_blank" rel="noopener"><img src="http://139.129.6.122/wp-content/uploads/2015/11/sm_print_2.png" alt="sm_print_2"></a><a href="http://139.129.6.122/wp-content/uploads/2015/11/sm_print_1.png" target="_blank" rel="noopener"><img src="http://139.129.6.122/wp-content/uploads/2015/11/sm_print_1.png" alt="sm_print_1"></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>不难发现，在n为偶数的时候，最后一点循环那里，会把4个方向（顶部，底部，左边，右边）都循环一边。而当n为奇数的时候，最后一点那里，只有最中间一个数字了。所以针对这种情况，我们的解决方案是：当n为偶数的时候，最外层循环循环<span style="color: #ff6600;">n<em>n</em></span>次，当n为奇数的时候，最外层循环循环<span style="color: #ff6600;">nn-1</span>次，并在最后，将最中间的那个数字（坐标为<span style="color: #ff6600;">x=y=(n-1)/2</span>）赋值为n*n。</p>
<p><pre class="lang:c++ decode:true">        //用来根据n是偶数还是奇数来决定最外层循环次数<br>        if (n % 2 == 0)<br>    {<br>        loops = n<em>n;<br>    }<br>    else if (n % 2 != 0)<br>    {<br>        loops = n</em>n - 1;<br>    }<br>    //now start to fill the arrary<br>        …..此处代码省略…..<br>    //如果n为奇数，我们就单独设置最中间的值<br>    if (n % 2 != 0)<br>    {<br>        spi[(n - 1) / 2][(n - 1) / 2] = n<em>n;<br>    }</em></pre><br>最主要，也是最关键的地方在于我们如何保证这里在顶部行输出后切换到右侧列，然后底部行，左侧列，再顶部行。对此，我用了一种比较笨的方法，（更棒的方法在未来会贴出，是用状态机），在一个循环nn次或者n*n-1次的大循环里面，写4个小循环，分别来控制顶部行，右侧列，底部行，左侧列的输出。</p>
<p>循环输出螺旋矩阵的核心代码大概是这样的：</p>
<p><pre class="lang:c++ decode:true ">       //now start to fill the arrary<br>       //rtop当前顶部行的位置，cright当前右侧列的位置，其它的我想我不用解释了<br>    for ( i = 1; i &lt;= loops; )<br>    {<br>        posp–;   //这个变量针对底部行，左侧列的输出控制<br>        //for the top-like raw<br>        rtop++;<br>        for ( j = rtop; j &lt; (xp+rtop); j++)<br>        {<br>            spi[rtop][j] = i;<br>            i++;<br>            //printf(“%d “, spi[rtop][j]);<br>        }</pre></p>
<pre><code>    //printf(&quot;n&quot;);
    if (i &amp;gt; loops)
    {
        break;
    }

    //for the right-like column
    cright--;
    for ( j = rtop; j &amp;lt; (xp+rtop); j++)   
    {
        spi[j][cright] = i;
        i++;
        //printf(&quot;%d &quot;, spi[j][cright]);
    }

    //printf(&quot;n&quot;);
    if (i &amp;gt; loops)
    {
        break;
    }

    //for the buttom-like raw
    rbuttom--;
    pb = posp;
    for (j = xp; j &amp;gt;0; j--)
    {
        spi[rbuttom][pb] = i;
        i++;
        pb--;
        //printf(&quot;%d &quot;, spi[rbuttom][j]);
    }

    //printf(&quot;n&quot;);
    if (i &amp;gt; loops)
    {
        break;
    }

    //for the left-like raw
    cleft++;
    pb = posp;
    for (j =xp; j &amp;gt;0; j--)
    {
        spi[pb][cleft] = i;
        i++;
        pb--;
        //printf(&quot;%d &quot;, spi[j][cleft]);
    }

    //printf(&quot;n&quot;);
    if (i &amp;gt; loops)
    {
        break;
    }

    //back-all processions
    xp -= 2;   //这个是记录每次输出多少个数字的
}&lt;/pre&gt;
</code></pre><p>&nbsp;</p>
<hr>
<p>&nbsp;</p>
<p>这里就留给将来更新第二种方法—-使用向量机的方式。最近学业繁重，恐怕是没时间了:(</p>
<hr>
<p>&lt;kanch@11/16/2015@CUIT&gt;</p>
<p>&nbsp;</p>
 
    </div>
    <div class="post-foot">
        <div id="disqus_thread"></div>
    </div>
</div>


                </section>
                <footer class="container fixed-690 footer">
    <div>
        <span>Power by <a href="https://hexo.io">Hexo</a></span>
    </div>
    <div>
        <span>Theme <a href="https://github.com/zhengxiaowai/hexo-theme-lessless">lessless</a></span>
    </div>
        
            
<div>
    <span id="hexiangyutest_container_site_pv">
    PV: <span id="busuanzi_value_site_pv"></span>
    </span>
    <span id="busuanzi_container_site_uv">
    UV: <span id="busuanzi_value_site_uv"></span>
    </span>
</div>

        
</footer>
        </div>
        
<script src="/js/jquery-3.2.1.slim.min.js"></script>
<script src="/js/popper.min.js"></script>
<script src="/js/bootstrap.min.js"></script>


    

    </body>
</html>